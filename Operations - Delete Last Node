#include <iostream>
using namespace std;
class Node
{
public:
    int value;
    Node* next;
};

void InsertAtBeginning(Node*& head, int value)
{
    Node* new_node = new Node();
    new_node->value = value;
    new_node->next = head;
    head = new_node;
        
}

Node* Find(Node* head, int value) {


    while (head != NULL) {
        if (head->value == value)
            return head;
        head = head->next;
    }
}

void InsertAfter(Node* prev_node, int Value) {

    if (prev_node == NULL) {
        cout << "the given previous node cannot be NULL";
        return;
    }

    Node* new_node = new Node();
    new_node->value = Value;
    new_node->next = prev_node->next;
    prev_node->next = new_node;
}

void InsertEnd(Node*& head, int value) {

    Node* new_node = new Node();

    new_node->value = value;

    new_node->next = NULL;

    if (head == NULL) {
        head = new_node;
        return;
    }

    Node* last = head;

    while (last->next != NULL)
    {
        last = last->next;

    }

    last->next = new_node;
    return;
}

void DeletNode(Node*& head, int value) {

    Node* current = head, * previous = head;

    if (current != NULL && current->value == value) {

        head = current->next;
        delete current;
        return;

    }


    while (current != NULL && current->value != value) {

        previous = current;
        current = current->next;

    }

    if (current == NULL) 
        return;

    previous->next = current->next;
    delete current;


}

void DeletFirstNode(Node*& head) {

    Node* current = head;
    if (head == NULL) {
        return;
    }
    head = current->next;
    delete current;
    return;
}

void  DeleteLastNode(Node*& head) {

    Node* current = head, * previous = head;
    if (head == NULL) {
        return;

    }
    if (current->next == NULL)
    {
        head = NULL;
        delete current;
        return;
    }
    while (current != NULL && current->next != NULL) {
        
        previous = current;
        current = current->next;

    }

    previous->next = NULL;
    delete current;
    return;
}




void PrintList(Node* head)

{
    cout << endl;
    while (head != NULL) {
        cout << head->value << " ";
        head = head->next;
    }
}

int main()
{
    Node* head = NULL;
        
    InsertEnd(head, 1);
    InsertEnd(head, 2);
    InsertEnd(head, 3);
    InsertEnd(head, 4);
    InsertEnd(head, 5);
    InsertEnd(head, 6);

    PrintList(head);
   
    DeleteLastNode(head);

    PrintList(head);

    
    system("pause>0");

}
